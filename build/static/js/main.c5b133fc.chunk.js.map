{"version":3,"sources":["logo.svg","components/Timer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","formatSeconds","ss","Timer","updateBreak","time25","time5","useState","timeval","setTimeval","isRunning","setIsRunning","count","setCount","isBreak","setIsBreak","playSound","setPlaySound","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","document","title","prev","className","onClick","e","url","playStatus","Sound","status","PLAYING","onFinishedPlaying","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iHAAAA,EAAOC,QAAU,IAA0B,kC,uICG3C,SAASC,EAAcC,GACnB,OAAGA,EAAK,EAAUA,EAEX,IAAKA,EAmHDC,MA7Ff,YAA+B,IAAfC,EAAc,EAAdA,YACNC,EAAS,GACTC,EAAQ,EAFY,EAMIC,mBAAS,CAACF,EAAO,IANrB,mBAMnBG,EANmB,KAMVC,EANU,OAOQF,oBAAS,GAPjB,mBAOnBG,EAPmB,KAORC,EAPQ,OAQAJ,mBAAS,GART,mBAQnBK,EARmB,KAQZC,EARY,OASIN,oBAAS,GATb,mBASnBO,EATmB,KASVC,EATU,OAUQR,oBAAS,GAVjB,mBAUnBS,EAVmB,KAURC,EAVQ,KA4D1B,OAhFJ,SAAqBC,EAAUC,GAC3B,IAAMC,EAAgBC,mBAGtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAGGI,qBAAU,WAIf,GAAc,OAAVH,EAAgB,CAClB,IAAIK,EAAKC,aAJX,WACEL,EAAcG,YAGaJ,GAC3B,OAAO,kBAAMO,cAAcF,OAE5B,CAACL,IA6DiBQ,EA9CrB,WAEI,GAAkB,IAAfnB,EAAQ,IAA2B,IAAfA,EAAQ,GAqB3B,OAhBAJ,GAAaU,GACTA,EAMAc,SAASC,MAAQ,SAHjBD,SAASC,MAAQ,QACjBhB,GAAS,SAAAiB,GAAI,QAAMA,MAIvBrB,EAAW,CAAEK,EAAcT,EAANC,EAAa,IAElCW,GAAa,GACbN,GAAa,QAGbI,GAAW,SAAAe,GAAI,OAAKA,KAIxBF,SAASC,MAAQrB,EAAQ,GAAG,MAAMP,EAAcO,EAAQ,IAEtC,IAAfA,EAAQ,GAEPC,GAAW,SAAAqB,GACP,MAAO,GAAGA,EAAK,GAAI,OAIxBrB,GAAW,SAAAqB,GACN,MAAO,CAACA,EAAK,KAAMA,EAAK,SAUKpB,EAAU,IAAK,MAGpD,6BACI,uBAAGqB,UAAU,iBACZjB,EAAQ,oDAAsB,4EAE/B,uBAAGiB,UAAU,gCACZjB,GAAW,qDAAkCA,GAAW,2DAEzD,wBAAIiB,UAAU,mCAAmCvB,EAAQ,GAAG,MAAMP,EAAcO,EAAQ,KACxF,2BACI,4BACAuB,UAAU,6DACVC,QAAS,SAAAC,GAAC,OAAEtB,GAAa,SAAAmB,GAAI,OAAGA,OAC9BpB,EAAuB,6CAAZ,+CAGjB,uBAAGqB,UAAU,wCAAb,cAEa,IAARnB,EAAY,4CAAU,oCAAGA,IAE7BI,GACD,kBAAC,IAAD,CACAkB,IAAI,wBACJC,WAAYC,IAAMC,OAAOC,QACzBC,kBA9BR,WACItB,GAAa,Q,MC5DNuB,MAff,WAAgB,IAAD,EACgBjC,oBAAS,GADzB,mBACNO,EADM,KACEC,EADF,KAGb,OACE,yBAAKgB,UAAU,OACb,4BAAQA,UAAS,qBACDjB,EAAS,WAAY,aAGnC,kBAAC,EAAD,CAAOV,YAAaW,OCLR0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASnB,SAASoB,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c5b133fc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.fccd758f.svg\";","import React, {useRef,useState,useEffect} from 'react';\nimport Sound from 'react-sound';\n\nfunction formatSeconds(ss) {\n    if(ss > 9) return ss;\n    //else add zero\n    return '0' +ss;\n}\nfunction useInterval(callback, delay) {\n    const savedCallback = useRef();\n  \n    // Remember the latest callback.\n    useEffect(() => {\n      savedCallback.current = callback;\n    }, [callback]);\n  \n    // Set up the interval.\n    return useEffect(() => {\n      function tick() {\n        savedCallback.current();\n      }\n      if (delay !== null) {\n        let id = setInterval(tick, delay);\n        return () => clearInterval(id);\n      }\n    }, [delay]);\n  }\n\nfunction Timer({updateBreak}) {\n    const time25 = 25;\n    const time5 = 5;\n\n\n    \n    const [timeval, setTimeval] = useState([time25,0]);\n    const [isRunning, setIsRunning] = useState(false);\n    const [count, setCount] = useState(0);\n    const [isBreak, setIsBreak] = useState(false);\n    const [playSound, setPlaySound] = useState(false);\n\n    function setTime(){\n        \n        if(timeval[1] === 0 && timeval[0] === 0) {\n            //timer end\n            //breaktime\n            // isBreak will only be updated in the next render so changing\n            // value now with the opposite of currenrt state\n            updateBreak(!isBreak);\n            if(!isBreak) {\n                // if it is break\n                // update count\n                document.title = \"Break\";\n                setCount(prev => ++prev)\n            } else {\n                document.title = \"Focus\";\n            }\n            setTimeval([!isBreak?time5:time25,0])\n            \n            setPlaySound(true);\n            setIsRunning(false);\n            \n            \n            setIsBreak(prev => !prev);\n            return;\n        }\n        \n        document.title = timeval[0]+\" : \"+formatSeconds(timeval[1]);\n\n        if(timeval[1] === 0) { \n            //subtract minute and sec\n            setTimeval(prev => {\n                return [--prev[0], 59]\n            })\n        } else {\n\n           setTimeval(prev => {\n                return [prev[0], --prev[1]]\n            })\n        }\n        \n    }\n\n    function removeSound() {\n        setPlaySound(false);\n    }\n\n        const clearInt = useInterval(setTime,isRunning?1000:null);\n\n    return (\n        <div>\n            <p className=\"text-gray-600\">\n            {isBreak?<span>Break üòå</span>:<span>Focus time üë®‚Äçüíª</span>}\n            </p>\n            <p className=\"text-gray-600 text-xs italic\">\n            {isBreak && <span>Get some fresh air</span>}{!isBreak && <span>Work on what's important</span>}\n            </p>\n            <h2 className=\"title text-green-300 large-text\">{timeval[0]+\" : \"+formatSeconds(timeval[1])}</h2>\n            <p>     \n                <button \n                className=\"text-sm focus:outline-none hover:underline hover:font-bold\"\n                onClick={e=>setIsRunning(prev=>!prev)}>\n                {!isRunning? <>start</>: <>pause</> }\n                </button>\n            </p>\n            <p className=\"text-sm text-gray-600 mt-3 font-bold\">\n                Streak:&nbsp; \n                {count===0 ? <>zero</>:<>{count}</>}\n            </p>\n            {playSound &&\n            <Sound\n            url=\"assets/Brrrriiing.mp3\"\n            playStatus={Sound.status.PLAYING}\n            onFinishedPlaying={removeSound}\n            />\n            }\n            \n        </div>\n    );\n}\n\n\nexport default Timer;","import React,{useState} from 'react';\nimport logo from './logo.svg';\nimport Timer from './components/Timer';\nimport './css/App.css';\n\n\n\n\nfunction App() {\n  const [isBreak,setIsBreak] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <header className={\n        `App-header ${isBreak? \"is-break\": \"is-focus\"}`\n      }>\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" width=\"150\" /> */}\n        <Timer updateBreak={setIsBreak}></Timer>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.scss';\n// import './css/tailwind.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}